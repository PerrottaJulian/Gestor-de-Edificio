@*
    GRAFICOSSS
*@

@{
    Layout = "~/Views/Shared/_Finanzas.cshtml";
}

<div class="row mt-2">

    <div class="col-6 mb-3">

        <div class="card">
            <div class="card-header"> Crecimiento de la reserva </div>
            <div class="card-body">
                <canvas id="chartCrecimientoReserva" style="max-height: 250px"></canvas>
            </div>
        </div>

    </div>

    <div class="col-6 mb-3">

        <div class="card" >
            <div class="card-header"> Balance Mensual Durante el año @DateTime.Now.Year </div>
            <div class="card-body">
                <canvas id="chartBalancePorMes" style="max-height: 250px" ></canvas>
            </div>
        </div>

    </div>


    <div class="col-6">

        <div class="card mb-3">
            <div class="card-header"> Comparativa de Ingresos  </div>
            <div class="card-body">
                <canvas id="chartIngresosPorTipo" style="max-height: 250px"></canvas>
            </div>
        </div>

    </div>
    
    <div class="col-6">

        <div class="card mb-3">
            <div class="card-header">Comparativa de Gastos</div>
            <div class="card-body">
                <canvas id="chartGastosPorTipo" style="max-height: 250px"></canvas>
            </div>
        </div>

    </div>

</div>

@section Scripts{

    <script>

        function ObtenerBalanceDeMeses() {

            fetch("ObtenerBalanceDeMeses")
                .then( (response) => {
                    return response.ok? response.json() : Promise.reject(response)
                })
                .then( (dataJson) => 
                {

                    const labels = dataJson.map(item => `${item.año}-${String(item.mes).padStart(2, '0')}`);
                    const valores = dataJson.map(item => item.totalNeto);

                    const data = {
                        labels: labels,
                        datasets: [{
                            label: 'Cantidad',
                            data: valores,
                            backgroundColor: 'rgb(0,0,0)',
                            borderWidth: 1
                        }]
                    };

                    const config = {
                        type: 'bar',
                        data: data,
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    }

                    const canvasBalancePorMes = document.getElementById("chartBalancePorMes")
                    const chartBalancePorMes = new Chart(canvasBalancePorMes, config)

                } 
                )
                .catch(error => console.error("Error al cargar datos del gráfico:", error));
        }

        ///////////////

        function ObtenerIngresosPorTipo() {

            fetch("ObtenerIngresosPorTipo")
                .then((response) => {
                    return response.ok ? response.json() : Promise.reject(response)
                })
                .then((dataJson) => {

                    console.log(dataJson)

                    const labels = dataJson.map(item => item.tipo);
                    const valores = dataJson.map(item => item.total);

                    const data = {
                        labels: labels,
                        datasets: [{
                            label: 'Cantidades',
                            data: valores,
                            backgroundColor: [
                                'rgb(255, 99, 132)',    // rojo
                                'rgb(54, 162, 235)',    // azul
                                'rgb(255, 205, 86)',    // amarillo
                                'rgb(75, 192, 192)',    // verde agua
                                'rgb(153, 102, 255)',   // violeta
                                'rgb(255, 159, 64)',    // naranja
                                'rgb(201, 203, 207)',   // gris claro
                                'rgb(0, 200, 83)',      // verde
                                'rgb(255, 112, 67)'     // coral
                            ],
                            hoverOffset: 4
                        }]
                    };

                    const config = {
                        type: 'polarArea',
                        data: data,
                        options: {}
                    };

                    const canvasIngresosPorTipo = document.getElementById("chartIngresosPorTipo")
                    const chartIngresosPorTipo = new Chart(canvasIngresosPorTipo, config)

                }
                )
                .catch(error => console.error("Error al cargar datos del gráfico:", error));
        }

        //////////////

        function ObtenerGastosPorTipo() {

            fetch("ObtenerGastosPorTipo")
                .then((response) => {
                    return response.ok ? response.json() : Promise.reject(response)
                })
                .then((dataJson) => {

                    console.log(dataJson)

                    const labels = dataJson.map(item => item.tipo);
                    const valores = dataJson.map(item => item.total);

                    const data = {
                        labels: labels,
                        datasets: [{
                            label: 'Cantidades',
                            data: valores,
                            backgroundColor: [
                                'rgb(255, 99, 132)',    // rojo
                                'rgb(54, 162, 235)',    // azul
                                'rgb(255, 205, 86)',    // amarillo
                                'rgb(75, 192, 192)',    // verde agua
                                'rgb(153, 102, 255)',   // violeta
                                'rgb(255, 159, 64)',    // naranja
                                'rgb(201, 203, 207)',   // gris claro
                                'rgb(0, 200, 83)',      // verde
                                'rgb(255, 112, 67)'     // coral
                            ],
                            hoverOffset: 4
                        }]
                    };

                    const config = {
                        type: 'doughnut',
                        data: data,
                    };

                    const canvasGastosPorTipo = document.getElementById("chartGastosPorTipo")
                    const chartGastosPorTipo = new Chart(canvasGastosPorTipo, config)

                }
                )
                .catch(error => console.error("Error al cargar datos del gráfico:", error));
        }

        ////////////////

        function ObtenerCrecimientoDeReserva()
        {
            fetch("ObtenerCrecimientoDeReserva")
                .then((response) => {
                    return response.ok ? response.json() : Promise.reject(response)
                })
                .then((dataJson) => {

                    console.log(dataJson)

                    const labels = dataJson.map(item => `${item.año}-${String(item.mes).padStart(2, '0')}`);
                    const valores = dataJson.map(item => item.saldo);

                    const data = {
                        labels: labels,
                        datasets: [{
                            label: 'Saldo',
                            data: valores,
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    };

                    const config = {
                        type: 'line',
                        data: data,
                    };

                    const canvasCrecimientoReserva = document.getElementById("chartCrecimientoReserva")
                    const chartCrecimientoReserva = new Chart(canvasCrecimientoReserva, config)

                }
                )
                .catch(error => console.error("Error al cargar datos del gráfico:", error));
        }


        $(document).ready(() => {
            ObtenerBalanceDeMeses()
            ObtenerIngresosPorTipo()
            ObtenerGastosPorTipo()
            ObtenerCrecimientoDeReserva()
        })

    </script>

}
